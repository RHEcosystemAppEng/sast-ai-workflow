# Evaluation Configuration for SAST-AI-Workflow
# Basic token counting and profiling via NAT/AIQ automation

general:
  use_uvloop: true

# Function configuration for judge_llm_analysis
functions:
  judge_llm_analysis:
    _type: judge_llm_analysis
    llm_name: eval_llm

# LLM configuration
llms:
  eval_llm:
    _type: nim
    model_name: nvidia/llama-3.1-nemotron-70b-instruct
    temperature: 0.0
    max_tokens: 1024
    api_key: ${LLM_API_KEY}
    # Force token counting - add specific parameters that might enable usage tracking
    stream_usage: true
    include_usage: true
  judge_llm:
    _type: nim
    model_name: nvidia/llama-3.1-nemotron-70b-instruct
    temperature: 0.0
    max_tokens: 512
    api_key: ${LLM_API_KEY}

# Workflow configuration
workflow:
  _type: judge_llm_analysis
  llm_name: eval_llm

# Evaluation configuration
eval:
  general:
    output_dir: ./evaluation/reports/judge_llm_analysis
    dataset:
      _type: json
      file_path: /Users/gziv/Dev/sast-ai-workflow/evaluation/dataset/judge_llm_eval/judge_llm_eval_dataset_12.json
      structure:
        question_key: "question"
        answer_key: "expected_investigation_result"
        generated_answer_key: "generated_answer"
        trajectory_key: "intermediate_steps"
        expected_trajectory_key: "expected_intermediate_steps"

    # Profiler configuration - automatic token counting and timing via NAT/AIQ
    profiler:
      compute_llm_metrics: true
      csv_exclude_io_text: true
      include_token_usage: true
      track_nvidia_usage: true
      enable_telemetry: true
      bottleneck_analysis:
        enable_nested_stack: false

  # Custom LLM-as-Judge Evaluation Metrics for Justification Quality
  evaluators:
    justification_quality_eval:
      _type: tunable_rag_evaluator
      llm_name: judge_llm
      default_scoring: true
      default_score_weights:
        clarity: 0.35                # How clear and understandable are the justifications
        completeness: 0.30           # How thoroughly does the reasoning cover all aspects
        technical_accuracy: 0.25     # Correctness of technical details and terminology
        logical_flow: 0.10           # Coherence and logical progression of reasoning
      judge_llm_prompt: >
        You are an expert software security engineer evaluating the quality of justifications for SAST vulnerability analysis.

        CRITICAL INSTRUCTION: Evaluate the clarity and completeness of reasoning in the generated justifications.
        Focus on how well the justifications explain the security analysis decision-making process.

        Compare the generated justifications against the expected justifications to assess quality across these dimensions:

        CLARITY (35%): How clear and understandable are the justifications?
        - Uses precise, unambiguous language that explains the reasoning
        - Avoids jargon without explanation or overly complex phrasing
        - Presents information in a logical, easy-to-follow structure
        - Makes the decision-making process transparent and comprehensible
        - Score 1.0 for crystal clear explanations, 0.0 for confusing or unclear reasoning

        COMPLETENESS (30%): How thoroughly does the reasoning cover all relevant aspects?
        - Addresses all key factors that influence the security assessment
        - Explains both positive and negative evidence considered
        - Covers the vulnerability mechanism, impact, and exploitability
        - Discusses relevant code context and execution paths
        - Score 1.0 for comprehensive coverage, 0.0 for superficial or incomplete reasoning

        TECHNICAL ACCURACY (25%): Correctness of security concepts and technical details?
        - Uses correct security terminology and concepts
        - Accurately describes code behavior and potential vulnerabilities
        - Correctly identifies relevant security mechanisms and protections
        - Demonstrates sound understanding of the vulnerability class
        - Score 1.0 for technically precise explanations, 0.0 for incorrect technical details

        LOGICAL FLOW (10%): Coherence and logical progression of the reasoning?
        - Presents arguments in a logical sequence that builds understanding
        - Connects evidence to conclusions in a clear cause-and-effect manner
        - Maintains consistency throughout the justification
        - Flows naturally from problem identification to conclusion
        - Score 1.0 for perfectly logical progression, 0.0 for contradictory or illogical flow

        Return scores 0.0-1.0 for each dimension. Focus on the QUALITY of reasoning and explanation, not just correctness of the final decision.