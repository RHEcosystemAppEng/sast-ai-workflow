apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: prepare-source
spec:
  params:
    - name: REPO_REMOTE_URL
      type: string
      description: Source code URL (SRPM or Git repo)
  workspaces:
    - name: source-workspace
      description: PVC shared by all tasks; full source tree will be placed here
  results:
    - name: repo-local-path
      description: "Local path to the prepared source code directory"
  steps:
    - name: prepare-source
      image: registry.access.redhat.com/ubi9/python-312
      # run as root so we can yum-install rpm-build
      securityContext:
        runAsUser: 0
      workingDir: $(workspaces.source-workspace.path)
      env:
        - name: HOME
          value: $(workspaces.source-workspace.path)
      script: |
        #!/usr/bin/env sh
        set -ex
        SRC_URL="$(params.REPO_REMOTE_URL)"
        WORKDIR="$(workspaces.source-workspace.path)"
        echo ">> Working directory: $WORKDIR"

        # -------------------------------------------------
        # CLEAN PREVIOUS CONTENT
        echo ">> Cleaning workspace…"
        rm -rf "${WORKDIR:?}/"* 
        # -------------------------------------------------

        echo ">> Processing source code URL: $SRC_URL"

        if echo "$SRC_URL" | grep -iq '\.rpm$'; then
          echo ">> Detected SRPM — downloading & expanding..."
          yum install -y rpm-build curl --allowerasing && yum clean all

          # init local rpmbuild tree *inside* PVC
          mkdir -p "$HOME"/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          echo '%_topdir %(echo $HOME)/rpmbuild' > "$HOME/.rpmmacros"

          curl -ksLf "$SRC_URL" -o "$HOME/package.src.rpm"
          rpm -ivh "$HOME/package.src.rpm"

          SPEC="$(find "$HOME/rpmbuild/SPECS" -name '*.spec' | head -n1)"
          if [ -z "$SPEC" ]; then
            echo "!! No .spec found in SRPM" >&2
            exit 1
          fi
          echo ">> rpmbuild -bp $SPEC"
          rpmbuild -bp "$SPEC"

          # check what was built in the BUILD directory
          echo ">> Contents of BUILD directory:"
          ls -la "$HOME/rpmbuild/BUILD"/
          
          # Find the source directory in BUILD (before copying)
          BUILD_DIR=$(find "$HOME/rpmbuild/BUILD" -maxdepth 1 -type d ! -path "$HOME/rpmbuild/BUILD" | head -n1)
          if [ -z "$BUILD_DIR" ]; then
            echo "!! No source directory found in BUILD after rpmbuild -bp" >&2
            exit 1
          fi
          
          # Get just the directory name
          SOURCE_DIR_NAME=$(basename "$BUILD_DIR")
          echo ">> Found source directory: $SOURCE_DIR_NAME"
          
          # Copy complete source tree into PVC root
          cp -r "$BUILD_DIR" "$WORKDIR"/
          
          # Set the repo path to the copied directory
          REPO_LOCAL_PATH="$WORKDIR/$SOURCE_DIR_NAME"
          
          # Clean up rpmbuild artifacts
          rm -rf "$HOME/rpmbuild"
          rm -f "$HOME/package.src.rpm" "$HOME/.rpmmacros"

        else
          echo ">> Treating URL as Git repo — cloning..."
          yum install -y git --allowerasing && yum clean all
          
          # Extract repo name from URL for clone directory
          REPO_NAME=$(basename "$SRC_URL" .git)
          git clone "$SRC_URL" "$WORKDIR/$REPO_NAME"
          
          REPO_LOCAL_PATH="$WORKDIR/$REPO_NAME"
        fi

        echo ">> prepare-source completed. Contents of workspace:"
        ls -lah "$WORKDIR"
        
        # Verify the directory exists
        if [ ! -d "$REPO_LOCAL_PATH" ]; then
          echo "!! Repository directory not found: $REPO_LOCAL_PATH" >&2
          exit 1
        fi
        
        # Write the repo path to the result
        echo -n "$REPO_LOCAL_PATH" > $(results.repo-local-path.path)
        echo ">> REPO_LOCAL_PATH set to: $REPO_LOCAL_PATH"