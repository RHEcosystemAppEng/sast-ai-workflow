apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: upload-to-gdrive
spec:
  description: >-
    This task uploads generated Excel files to Google Drive.
    It creates a folder structure based on the current date and uploads
    the SAST scan results to the specified Google Drive location.
  params:
    - name: gdrive-folder-id
      description: "Google Drive folder ID where files should be uploaded"
      type: string
      default: ""
    - name: excel-file-path
      description: "Path to the Excel file in the workspace"
      type: string
      default: "sast-results.xlsx"
    - name: excel-file-name
      description: "the name of the excel file name to set in the drive"
      type: string
    - name: GOOGLE_APPLICATION_CREDENTIALS
      description: "the full path of the google service account credentials file"
      type: string
  workspaces:
    - name: source
      description: "Workspace containing the generated Excel file"
      mountPath: /workspace/source
    - name: google-sa-json-ws
      description: "Workspace containing Google service account JSON file"
      mountPath: /workspace/google-sa
  volumes:
    - name: gdrive-scripts
      configMap:
        name: sast-ai-gdrive-upload-scripts
        defaultMode: 0755
  steps:
    - name: validate-and-prepare
      image: registry.redhat.io/ubi9/ubi:latest
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Validating Excel file existence ==="
        EXCEL_FILE="$(workspaces.source.path)/$(params.excel-file-path)"
        
        if [ ! -f "$EXCEL_FILE" ]; then
          echo "ERROR: Excel file not found at $EXCEL_FILE"
          echo "Available files in workspace:"
          ls -la $(workspaces.source.path) || echo "Workspace is empty or inaccessible"
          exit 1
        fi
        
        echo "Excel file found: $EXCEL_FILE"
        echo "File size: $(du -h "$EXCEL_FILE" | cut -f1)"
        echo "=== Preparation completed ==="

    - name: setup-gdrive-config
      image: registry.redhat.io/ubi9/ubi:latest
      env:
        - name: GDRIVE_FOLDER_ID_FROM_CM
          valueFrom:
            configMapKeyRef:
              name: sast-ai-gdrive-config
              key: folder-id
              optional: true
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Setting up Google Drive configuration ==="
        
        # Check if parameter is provided
        if [ -n "$(params.gdrive-folder-id)" ]; then
          echo "Using Google Drive folder ID from parameter: $(params.gdrive-folder-id)"
        else
          echo "No Google Drive folder ID provided as parameter"
          echo "Checking for ConfigMap fallback..."
          
          # Check if ConfigMap environment variable is available
          if [ -n "$GDRIVE_FOLDER_ID_FROM_CM" ]; then
            echo "Found Google Drive folder ID in ConfigMap: $GDRIVE_FOLDER_ID_FROM_CM"
          else
            echo "No ConfigMap configuration available"
            echo "Pipeline will exit gracefully without uploading"
            exit 0
          fi
        fi
        
        echo "=== Configuration setup completed ==="

    - name: check-service-account
      image: registry.redhat.io/ubi9/ubi:latest
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Checking service account credentials ==="
        
        # Check if service account file exists in workspace
        if [ ! -f "$(params.GOOGLE_APPLICATION_CREDENTIALS)" ]; then
          echo "Service account file not found in google-sa-json-ws workspace"
          echo "Pipeline will exit gracefully without uploading"
          exit 0
        fi
        
        echo "Service account file found in workspace"
        echo "=== Service account check completed ==="

    - name: upload-to-gdrive
      image: google/cloud-sdk:slim
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "$(params.GOOGLE_APPLICATION_CREDENTIALS)"
        - name: GDRIVE_FOLDER_ID_FROM_CM
          valueFrom:
            configMapKeyRef:
              name: sast-ai-gdrive-config
              key: folder-id
              optional: true
      volumeMounts:
        - name: gdrive-scripts
          mountPath: /scripts
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Starting Google Drive upload process ==="
        
        # Check if we have required parameters
        if [ -z "$(params.gdrive-folder-id)" ]; then
          # Try ConfigMap environment variable
          if [ -n "$GDRIVE_FOLDER_ID_FROM_CM" ]; then
            GDRIVE_FOLDER_ID="$GDRIVE_FOLDER_ID_FROM_CM"
            echo "Using Google Drive folder ID from ConfigMap: $GDRIVE_FOLDER_ID"
          else
            echo "Skipping Google Drive upload - no folder ID available"
            echo "This is not an error - pipeline continues gracefully"
            exit 0
          fi
        else
          GDRIVE_FOLDER_ID="$(params.gdrive-folder-id)"
          echo "Using Google Drive folder ID from parameter: $GDRIVE_FOLDER_ID"
        fi
        
        # Check service account
        if [ ! -f "$(params.GOOGLE_APPLICATION_CREDENTIALS)" ]; then
          echo "Skipping Google Drive upload - service account not available"
          echo "This is not an error - pipeline continues gracefully"
          exit 0
        fi
        
        # Install required packages using virtual environment
        echo "Installing required packages..."
        apt-get update -qq && apt-get install -y -qq curl jq python3-pip python3-venv
        
        # Create virtual environment
        python3 -m venv /tmp/venv
        source /tmp/venv/bin/activate
        
        # Install Python packages in virtual environment
        pip install --quiet google-api-python-client google-auth-httplib2 google-auth-oauthlib
        
        # Get file information directly from parameters and workspaces
        EXCEL_FILE="$(workspaces.source.path)/$(params.excel-file-path)"
        EXCEL_FILENAME="$(params.excel-file-name)"
        
        echo "File to upload: $EXCEL_FILE"
        echo "Remote filename: $EXCEL_FILENAME"
        echo "Target folder ID: $GDRIVE_FOLDER_ID"
        
        echo "Executing Google Drive upload..."
        python /scripts/gdrive_upload.py "$EXCEL_FILE" "$EXCEL_FILENAME" "$GDRIVE_FOLDER_ID"
        
        if [ $? -eq 0 ]; then
          echo "=== Google Drive upload completed successfully! ==="
        else
          echo "=== Google Drive upload failed ==="
          exit 1
        fi