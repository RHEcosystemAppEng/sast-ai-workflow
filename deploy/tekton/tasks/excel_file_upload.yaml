apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: upload-to-gdrive
spec:
  description: >-
    This task uploads generated Excel files to Google Drive.
    It creates a folder structure based on the current date and uploads
    the SAST scan results to the specified Google Drive location.
  params:
    - name: gdrive-folder-id
      description: "Google Drive folder ID where files should be uploaded"
      type: string
      default: ""
    - name: excel-file-path
      description: "Path to the Excel file in the workspace"
      type: string
      default: "sast-results.xlsx"
    - name: excel-file-name
      description: "the name of the excel file name to set in the drive"
      type: string
  workspaces:
    - name: source
      description: "Workspace containing the generated Excel file"
      mountPath: /workspace/source
    - name: google-sa-json-ws
      description: "Workspace containing Google service account JSON file"
      mountPath: /workspace/google-sa
  steps:
    - name: validate-and-prepare
      image: registry.redhat.io/ubi9/ubi:latest
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Validating Excel file existence ==="
        EXCEL_FILE="$(workspaces.source.path)/$(params.excel-file-path)"
        
        if [ ! -f "$EXCEL_FILE" ]; then
          echo "ERROR: Excel file not found at $EXCEL_FILE"
          echo "Available files in workspace:"
          ls -la /workspace/source/ || echo "Workspace is empty or inaccessible"
          exit 1
        fi
        
        echo "Excel file found: $EXCEL_FILE"
        echo "File size: $(du -h "$EXCEL_FILE" | cut -f1)"
        echo "=== Preparation completed ==="

    - name: setup-gdrive-config
      image: registry.redhat.io/ubi9/ubi:latest
      env:
        - name: GDRIVE_FOLDER_ID_FROM_CM
          valueFrom:
            configMapKeyRef:
              name: gdrive-config
              key: folder-id
              optional: true
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Setting up Google Drive configuration ==="
        
        # Check if parameter is provided
        if [ -n "$(params.gdrive-folder-id)" ]; then
          echo "Using Google Drive folder ID from parameter: $(params.gdrive-folder-id)"
        else
          echo "No Google Drive folder ID provided as parameter"
          echo "Checking for ConfigMap fallback..."
          
          # Check if ConfigMap environment variable is available
          if [ -n "$GDRIVE_FOLDER_ID_FROM_CM" ]; then
            echo "Found Google Drive folder ID in ConfigMap: $GDRIVE_FOLDER_ID_FROM_CM"
          else
            echo "No ConfigMap configuration available"
            echo "Pipeline will exit gracefully without uploading"
            exit 0
          fi
        fi
        
        echo "=== Configuration setup completed ==="

    - name: check-service-account
      image: registry.redhat.io/ubi9/ubi:latest
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Checking service account credentials ==="
        
        # Check if service account file exists in workspace
        if [ ! -f "$(workspaces.google-sa-json-ws.path)/service_account.json" ]; then
          echo "Service account file not found in google-sa-json-ws workspace"
          echo "Pipeline will exit gracefully without uploading"
          exit 0
        fi
        
        echo "Service account file found in workspace"
        echo "=== Service account check completed ==="

    - name: upload-to-gdrive
      image: google/cloud-sdk:slim
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /tmp/service-account.json
        - name: GDRIVE_FOLDER_ID_FROM_CM
          valueFrom:
            configMapKeyRef:
              name: gdrive-config
              key: folder-id
              optional: true
      script: |
        #!/bin/bash
        set -e
        
        echo "=== Starting Google Drive upload process ==="
        
        # Check if we have required parameters
        if [ -z "$(params.gdrive-folder-id)" ]; then
          # Try ConfigMap environment variable
          if [ -n "$GDRIVE_FOLDER_ID_FROM_CM" ]; then
            GDRIVE_FOLDER_ID="$GDRIVE_FOLDER_ID_FROM_CM"
            echo "Using Google Drive folder ID from ConfigMap: $GDRIVE_FOLDER_ID"
          else
            echo "Skipping Google Drive upload - no folder ID available"
            echo "This is not an error - pipeline continues gracefully"
            exit 0
          fi
        else
          GDRIVE_FOLDER_ID="$(params.gdrive-folder-id)"
          echo "Using Google Drive folder ID from parameter: $GDRIVE_FOLDER_ID"
        fi
        
        # Check service account
        if [ ! -f "$(workspaces.google-sa-json-ws.path)/service_account.json" ]; then
          echo "Skipping Google Drive upload - service account not available"
          echo "This is not an error - pipeline continues gracefully"
          exit 0
        fi
        
        # Install required packages using virtual environment
        echo "Installing required packages..."
        apt-get update -qq && apt-get install -y -qq curl jq python3-pip python3-venv
        
        # Create virtual environment
        python3 -m venv /tmp/venv
        source /tmp/venv/bin/activate
        
        # Install Python packages in virtual environment
        pip install --quiet google-api-python-client google-auth-httplib2 google-auth-oauthlib
        
        # Extract service account credentials from workspace
        echo "Setting up service account credentials..."
        cp "$(workspaces.google-sa-json-ws.path)/service_account.json" /tmp/service-account.json
        
        # Get file information directly from parameters and workspaces
        EXCEL_FILE="$(workspaces.source.path)/$(params.excel-file-path)"
        EXCEL_FILENAME="$(params.excel-file-name)"
        
        echo "File to upload: $EXCEL_FILE"
        echo "Remote filename: $EXCEL_FILENAME"
        echo "Target folder ID: $GDRIVE_FOLDER_ID"
        
        # Create Python script for Google Drive operations with Shared Drive support
        cat > /tmp/gdrive_upload.py << 'EOF'
        import sys
        import os
        from datetime import datetime
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        from google.oauth2.service_account import Credentials
        
        def create_date_folder(service, parent_folder_id):
            """Create a date-based folder structure using YYYY-MM-DD format"""
            now = datetime.now()
            folder_name = now.strftime("%Y-%m-%d")
            
            print(f"Creating/finding folder: {folder_name}")
            
            # Check if folder already exists - WITH SHARED DRIVE SUPPORT
            query = f"name='{folder_name}' and '{parent_folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
            results = service.files().list(
                q=query,
                supportsAllDrives=True,
                includeItemsFromAllDrives=True
            ).execute()
            folders = results.get('files', [])
            
            if folders:
                folder_id = folders[0]['id']
                print(f"Folder already exists: {folder_name} (ID: {folder_id})")
                return folder_id
            
            # Create new folder - WITH SHARED DRIVE SUPPORT
            folder_metadata = {
                'name': folder_name,
                'parents': [parent_folder_id],
                'mimeType': 'application/vnd.google-apps.folder'
            }
            
            folder = service.files().create(
                body=folder_metadata,
                supportsAllDrives=True
            ).execute()
            folder_id = folder.get('id')
            print(f"Created new folder: {folder_name} (ID: {folder_id})")
            return folder_id
        
        def upload_file(service, file_path, filename, parent_folder_id):
            """Upload file to Google Drive with timestamp"""
            print(f"Uploading file with base name: {filename}")
            
            # Add timestamp to filename for unique identification
            base_name, ext = os.path.splitext(filename)
            if not ext:  # If no extension provided, assume .xlsx
                ext = '.xlsx'
            
            timestamp = datetime.now().strftime("%H-%M-%S")
            timestamped_filename = f"{base_name}_{timestamp}{ext}"
            
            print(f"Final filename with timestamp: {timestamped_filename}")
            
            # Check if file already exists (just in case, though timestamp should make it unique)
            query = f"name='{timestamped_filename}' and '{parent_folder_id}' in parents and trashed=false"
            results = service.files().list(
                q=query,
                supportsAllDrives=True,
                includeItemsFromAllDrives=True
            ).execute()
            existing_files = results.get('files', [])
            
            if existing_files:
                # This should be very rare with timestamp, but add seconds if needed
                timestamp_with_seconds = datetime.now().strftime("%H-%M-%S")
                timestamped_filename = f"{base_name}_{timestamp_with_seconds}{ext}"
                print(f"File still exists, using: {timestamped_filename}")
            
            file_metadata = {
                'name': timestamped_filename,
                'parents': [parent_folder_id]
            }
            
            media = MediaFileUpload(file_path, resumable=True)
            file = service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id,name,webViewLink',
                supportsAllDrives=True
            ).execute()
            
            print(f"File uploaded successfully!")
            print(f"  File ID: {file.get('id')}")
            print(f"  File Name: {file.get('name')}")
            print(f"  View Link: {file.get('webViewLink')}")
            return file.get('id')
        
        def verify_parent_folder_access(service, folder_id):
            """Verify we can access the parent folder"""
            try:
                folder_info = service.files().get(
                    fileId=folder_id,
                    supportsAllDrives=True,
                    fields='id,name,mimeType,driveId,teamDriveId'
                ).execute()
                
                print(f"Parent folder access verified:")
                print(f"  Name: {folder_info.get('name')}")
                print(f"  Type: {folder_info.get('mimeType')}")
                print(f"  Drive ID: {folder_info.get('driveId', 'My Drive')}")
                
                return True
            except Exception as e:
                print(f"✗ Cannot access parent folder: {e}")
                return False
        
        def main():
            try:
                # Initialize credentials and service
                credentials = Credentials.from_service_account_file('/tmp/service-account.json')
                service = build('drive', 'v3', credentials=credentials)
                
                # Get parameters
                excel_file = sys.argv[1]
                filename = sys.argv[2]
                parent_folder_id = sys.argv[3]
                
                # Verify parent folder access first
                if not verify_parent_folder_access(service, parent_folder_id):
                    print("ERROR: Cannot access the specified parent folder")
                    return 1
                
                # Always create date folder
                target_folder_id = create_date_folder(service, parent_folder_id)
                
                # Upload file
                file_id = upload_file(service, excel_file, filename, target_folder_id)
                
                print("=== Upload completed successfully! ===")
                return 0
                
            except Exception as e:
                print(f"ERROR: Upload failed - {str(e)}")
                import traceback
                traceback.print_exc()
                return 1
        
        if __name__ == "__main__":
            sys.exit(main())
        EOF
        
        # Execute the upload
        echo "Executing Google Drive upload..."
        source /tmp/venv/bin/activate
        python /tmp/gdrive_upload.py "$EXCEL_FILE" "$EXCEL_FILENAME" "$GDRIVE_FOLDER_ID"
        
        if [ $? -eq 0 ]; then
          echo "=== Google Drive upload completed successfully! ==="
        else
          echo "=== Google Drive upload failed ==="
          exit 1
        fi