apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: transform-sast-report-to-sarif-format
spec:
  params:
    - name: INPUT_REPORT_FILE_PATH
      type: string
      description: "Input report file path or URL"
  workspaces:
    - name: report-workspace
      description: "Workspace for storing downloaded and converted report files"
    - name: google-sa-json-ws
      description: "Workspace containing Google service account key file"
      optional: true
  results:
    - name: report-file-path
      description: "Final path to the report file (converted to SARIF if needed)"
  steps:
    - name: process-report
      image: registry.access.redhat.com/ubi9/ubi:latest
      workingDir: $(workspaces.report-workspace.path)
      script: |
        #!/bin/bash
        set -e
        
        REPORT_PATH="$(params.INPUT_REPORT_FILE_PATH)"
        WORKSPACE_PATH="$(workspaces.report-workspace.path)"
        
        echo "Processing report path: $REPORT_PATH"
        echo "Workspace path: $WORKSPACE_PATH"
        
        # Check if the input is a URL of json file 
        if [[ "$REPORT_PATH" =~ ^https?://.*\.(json|js|sarif)$ ]]; then
          echo "Detected JSON URL - using direct download ..."
          
          # Download the JSON file
          JSON_FILE="$WORKSPACE_PATH/downloaded_report.json"
          echo "Downloading file to: $JSON_FILE"
          curl -kL "$REPORT_PATH" -o "$JSON_FILE"
          
          # Verify the file was downloaded
          if [ ! -f "$JSON_FILE" ]; then
            echo "Error: Failed to download file"
            exit 1
          fi
          
          echo "File downloaded successfully ($(wc -c < "$JSON_FILE") bytes)"
          
          # Check if it's a JSON file and convert to SARIF
          if [[ "$JSON_FILE" == *.(json|js) ]] || file "$JSON_FILE" | grep -q "JSON"; then
            echo "Detected JSON file - converting to SARIF format..."

            # Install required tools
            echo "Installing required packages..."
            dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
            dnf install -y csdiff python3-pip
            
            # Convert to SARIF format using csgrep
            SARIF_FILE="$WORKSPACE_PATH/report.sarif"
            echo "Converting to SARIF format: $SARIF_FILE"
            csgrep "$JSON_FILE" --mode sarif > "$SARIF_FILE"
            
            # Verify the SARIF file was created
            if [ ! -f "$SARIF_FILE" ]; then
              echo "Error: Failed to create SARIF file"
              exit 1
            fi
            
            echo "SARIF file created successfully ($(wc -c < "$SARIF_FILE") bytes)"
            
            # Clean up the downloaded JSON file
            rm -f "$JSON_FILE"
            
            # Set the result to the SARIF file path
            echo -n "$SARIF_FILE" > $(results.report-file-path.path)
            echo "Report converted and saved as: $SARIF_FILE"
            ls -l $SARIF_FILE
          else
            echo "File is a SARIF file - using as-is"
            # Set the result to the downloaded file path
            echo -n "$JSON_FILE" > $(results.report-file-path.path)
            echo "Report saved as: $JSON_FILE"
          fi
          
        else
          echo "Input is not a JSON URL - passing through unchanged"
          # For non-URL paths, pass the original path through
          echo -n "$REPORT_PATH" > $(results.report-file-path.path)
          echo "Report path unchanged: $REPORT_PATH"
        fi
        
        echo "Report preparation completed" 