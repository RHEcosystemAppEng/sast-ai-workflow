apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: validate-urls
spec:
  params:
    - name: sourceCodeUrl
      type: string
      description: "URL of the source code (RPM package or Git repository URL)"
    - name: INPUT_REPORT_FILE_PATH
      type: string
      description: "URL of the Google Spreadsheet"
    - name: falsePositivesUrl
      type: string
      description: "GitLab repository URL containing known false positive issues"
  workspaces:
    - name: google-sa-json-ws
      description: "Workspace containing Google service account key file"
      optional: true
  steps:
    - name: validate-source-url
      image: curlimages/curl:latest
      script: |
        #!/usr/bin/env sh
        echo "Validating source code URL: $(params.sourceCodeUrl)"
        curl -ksSfL "$(params.sourceCodeUrl)" || (echo "Error: Source code URL is invalid" && exit 1)

    - name: validate-false-positives-url
      image: curlimages/curl:latest
      script: |
        #!/usr/bin/env sh
        FP_URL="$(params.falsePositivesUrl)"
        echo "Validating false positives URL: $FP_URL"
        # If blank, skip. If not, ensure it's valid
        if [ -z "$FP_URL" ]; then
          echo "No false positives URL provided; skipping validation."
          exit 0
        fi
        curl -ksSfL "$FP_URL" || (echo "Error: False positives URL is invalid" && exit 1)

    - name: validate-spreadsheet-url
      image: 'python:3.11-slim'
      script: |
        #!/bin/bash
        set -e
        SPREADSHEET_URL="$(params.INPUT_REPORT_FILE_PATH)"
        echo "Validating Google Spreadsheet URL: $SPREADSHEET_URL"
        # Extract Sheet ID from URL
        SHEET_ID=$(echo "$SPREADSHEET_URL" | sed -n 's/.*\/spreadsheets\/d\/\([a-zA-Z0-9_-]*\).*/\1/p')
        if [ -z "$SHEET_ID" ]; then
            echo "✗ Invalid Google Sheets URL format"
            echo "Expected format: https://docs.google.com/spreadsheets/d/{SHEET_ID}/..."
            exit 1
        fi
        echo "Sheet ID: $SHEET_ID"
        # Check if credentials workspace is provided
        if [ -f "$(workspaces.credentials.path)/key.json" ]; then
            echo "Service account credentials found - testing access..."
            
            echo "Installing Google API libraries..."
            pip install --quiet google-api-python-client google-auth
            
            # Create Python validation script
            cat > /tmp/validate_sheets.py << 'PYTHON_SCRIPT'
        import os
        import sys
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        from googleapiclient.errors import HttpError
        def validate_sheet_access(sheet_id, credentials_path):
            try:
                credentials = service_account.Credentials.from_service_account_file(
                    credentials_path,
                    scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']
                )
                print("✓ Credentials loaded successfully")
                
                service = build('sheets', 'v4', credentials=credentials)
                print("✓ Sheets API service created")
                
                print("Testing access to spreadsheet...")
                spreadsheet = service.spreadsheets().get(
                    spreadsheetId=sheet_id,
                    fields='properties.title'
                ).execute()
                
                title = spreadsheet.get('properties', {}).get('title', 'Unknown')
                print(f"✓ Successfully accessed spreadsheet: '{title}'")
                print("✓ Spreadsheet access validation complete")
                
            except HttpError as e:
                if e.resp.status == 403:
                    print("✗ Access denied - service account lacks permissions")
                    print("  Make sure the service account email is shared with the spreadsheet")
                elif e.resp.status == 404:
                    print("✗ Spreadsheet not found - check the URL or permissions")
                else:
                    print(f"✗ HTTP error {e.resp.status}: {e}")
                sys.exit(1)
            except Exception as e:
                print(f"✗ Error: {e}")
                sys.exit(1)
        if __name__ == "__main__":
            if len(sys.argv) != 3:
                print("Usage: python validate_sheets.py <sheet_id> <credentials_path>")
                sys.exit(1)
            
            sheet_id = sys.argv[1]
            credentials_path = sys.argv[2]
            validate_sheet_access(sheet_id, credentials_path)
        PYTHON_SCRIPT
                    
                    # Run the Python script with arguments
                    python3 /tmp/validate_sheets.py "$SHEET_ID" "$(workspaces.credentials.path)/key.json"
                else
                    echo "⚠ No service account credentials provided"
                    echo "✓ URL format validation passed"
                    echo "Note: Cannot test access without credentials workspace"
                fi